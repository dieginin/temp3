name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  PYTHON_VERSION: 3.13.3
  FLUTTER_VERSION: 3.29.2
  PYTHONIOENCODING: utf-8

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
        run: |
          python -m pip install --upgrade pip
          pip flet

      - name: Build app
        shell: bash
        run: |
          echo "VERSION = '$(echo ${{ github.ref_name }} | sed 's/^v//')'" > src/version.py
          flutter config --no-analytics
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            flet build windows --verbose --no-rich-output
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            flet build macos --verbose --no-rich-output
          fi
          pip install tomli
          python -c "
          import tomli
          with open('pyproject.toml', 'rb') as f:
              config = tomli.load(f)
              print(f'PROJECT={config[\"tool\"][\"flet\"][\"product\"]}')
              print(f'COMPANY={config[\"tool\"][\"flet\"][\"company\"]}')
          " >> $GITHUB_ENV

      - name: Create installer
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            choco install innosetup
            echo '[Setup]' > installer.iss
            echo 'AppName=${{ env.PROJECT }}' >> installer.iss
            echo 'AppVersion=${{ github.ref_name }}' >> installer.iss
            echo 'AppPublisher=${{ env.COMPANY }}' >> installer.iss
            echo 'DefaultDirName={pf}\${{ env.PROJECT }}' >> installer.iss
            echo 'DefaultGroupName=${{ env.PROJECT }}' >> installer.iss
            echo 'OutputBaseFilename=${{ env.PROJECT }}-Windows' >> installer.iss
            echo 'Compression=lzma2' >> installer.iss
            echo 'SolidCompression=yes' >> installer.iss
            echo '[Languages]' >> installer.iss
            echo 'Name: "spanish"; MessagesFile: "compiler:Languages\Spanish.isl"' >> installer.iss
            echo '[Files]' >> installer.iss
            echo 'Source: "build\windows\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs' >> installer.iss
            echo '[Icons]' >> installer.iss
            echo 'Name: "{commondesktop}\${{ env.PROJECT }}"; Filename: "{app}\${{ env.PROJECT }}.exe"' >> installer.iss
            echo 'Name: "{group}\${{ env.PROJECT }}"; Filename: "{app}\${{ env.PROJECT }}.exe"' >> installer.iss
            echo 'Name: "{group}\Desinstalar ${{ env.PROJECT }}"; Filename: "{uninstallexe}"' >> installer.iss
            echo '[Run]' >> installer.iss
            echo 'Filename: "{app}\${{ env.PROJECT }}.exe"; Description: "Run ${{ env.PROJECT }}"; Flags: postinstall skipifsilent' >> installer.iss
            iscc installer.iss
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install create-dmg
            create-dmg \
              --volname "${{ env.PROJECT }} Installer" \
              --window-pos 200 120 \
              --window-size 800 400 \
              --icon-size 100 \
              --icon "${{ env.PROJECT }}.app" 200 190 \
              --hide-extension "${{ env.PROJECT }}.app" \
              --app-drop-link 600 185 \
              "build/${{ env.PROJECT }}-macOS.dmg" \
              "build/macos/${{ env.PROJECT }}.app"
          fi

      - name: List build folders separately
        shell: bash
        if: always()
        run: |
          echo "ðŸ“¦ build/"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            dir build /s
          fi


      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ runner.os }}
          path: |
            build/*.exe
            build/*.dmg

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}